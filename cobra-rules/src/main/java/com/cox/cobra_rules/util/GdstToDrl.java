package com.cox.cobra_rules.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Iterator;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;
import org.drools.workbench.models.guided.dtable.backend.GuidedDTXMLPersistence;
import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class GdstToDrl implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public GdstToDrl() {
	}

	public static void main(String[] args) {
		Iterator<File> gdstFiles = FileUtils.iterateFiles(new File(args[0]),
				new String[] { "gdst" }, true);
		while (gdstFiles.hasNext()) {
			BufferedWriter bw = null;
			File gdstFile = gdstFiles.next();
			try (InputStream inputStream = new FileInputStream(gdstFile)) {
				String xmlData = getStringFromInputStream(inputStream);
				// parse the table model
				GuidedDTXMLPersistence p = GuidedDTXMLPersistence.getInstance();
				p.unmarshal(xmlData);
				GuidedDecisionTable52 model = GuidedDTXMLPersistence.getInstance().unmarshal(xmlData);
				// compile it into drools rules
				String droolsRules = GuidedDTDRLPersistence.getInstance().marshal(model);
				
				File file = new File(FilenameUtils.removeExtension(gdstFile.getPath()) + ".drl");
				FileWriter fw = new FileWriter(file.getAbsoluteFile());
				bw = new BufferedWriter(fw);
				bw.write(droolsRules);
			} catch (Exception t) {
				t.printStackTrace();
			} finally {
				try {
					bw.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	private static String getStringFromInputStream(InputStream is) {

		BufferedReader br = null;
		StringBuilder sb = new StringBuilder();

		String line;
		try {

			br = new BufferedReader(new InputStreamReader(is));
			while ((line = br.readLine()) != null) {
				sb.append(line);
				sb.append("\n");
			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		return sb.toString();

	}
}